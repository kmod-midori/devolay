name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install Dependencies
        run: sudo apt update && sudo apt install -y mingw-w64 bison flex texinfo unzip help2man libtool-bin libncurses5-dev libncursesw5-dev p7zip-full cmake python3

      - name: Install innoextract
        run: wget https://constexpr.org/innoextract/files/innoextract-1.9-linux.tar.xz && sudo tar --directory=/opt -xvf innoextract-1.9-linux.tar.xz

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          link-to-sdk: true
          local-cache: true

      - name: Finish NDK Setup
        run: |
          cd $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin
          rm llvm-strip
          ln -s llvm-objcopy llvm-strip
          rm ld
          ln -s lld ld
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - uses: actions/checkout@v2

      - name: Create dummy mingw
        run: |
          sudo ln -s `pwd`/.github/workflows/g++-faker.py /usr/bin/i686-w64-mingw32-g++-faker
          sudo ln -s `pwd`/.github/workflows/g++-faker.py /usr/bin/x86_64-w64-mingw32-g++-faker

      - uses: actions/cache@v2
        id: cacheNDI
        with:
          path: 'NDI SDK*'
          key: ${{ runner.os }}-ndiv5

      - name: Setup the NDI SDK
        if: steps.cacheNDI.outputs.cache-hit != 'true'
        run: |
          wget https://downloads.ndi.tv/SDK/NDI_SDK_Linux/Install_NDI_SDK_v5_Linux.tar.gz && tar -xvf Install_NDI_SDK_v5_Linux.tar.gz
          sed -i 's/read -p/cat/g' Install_NDI_SDK_v5_Linux.sh
          PAGER=cat REPLY=y ./Install_NDI_SDK_v5_Linux.sh
          rm Install_NDI_SDK_v5_Linux.tar.gz && rm Install_NDI_SDK_v5_Linux.sh
          wget https://downloads.ndi.tv/SDK/NDI_SDK_Android/Install_NDI_Advanced_SDK_v5_Android.tar.gz && tar -xvf Install_NDI_Advanced_SDK_v5_Android.tar.gz
          sed -i 's/read -p/cat/g' Install_NDI_Advanced_SDK_v5_Android.sh
          PAGER=cat REPLY=y ./Install_NDI_Advanced_SDK_v5_Android.sh
          rm Install_NDI_Advanced_SDK_v5_Android.tar.gz && rm Install_NDI_Advanced_SDK_v5_Android.sh
          wget https://downloads.ndi.tv/SDK/NDI_SDK/NDI%205%20SDK.exe && /opt/innoextract-1.9-linux/innoextract "NDI 5 SDK.exe"
          mkdir "NDI SDK for Windows" && mv app/* "NDI SDK for Windows"
          rm -r app && rm "NDI 5 SDK.exe"
          wget https://downloads.ndi.tv/SDK/NDI_SDK_Mac/Install_NDI_SDK_v5_macOS.pkg && 7z x Install_NDI_SDK_v5_macOS.pkg
          7z x Payload~
          mv "NDI SDK for macOS" "NDI SDK for Apple"
          rm Install_NDI_SDK_v5_macOS.pkg && rm Payload~

      - uses: actions/cache@v2
        id: cachetoolchain
        with:
          path: osxcross
          key: ${{ runner.os }}-osxtoolchain

      # Setup osxcross, as detailed here: https://github.com/andrew-d/docker-osxcross/blob/master/Dockerfile
      - name: Setup OSXCross
        if: steps.cachetoolchain.outputs.cache-hit != 'true'
        run: |
          git clone -n https://github.com/tpoechtrager/osxcross.git
          cd osxcross
          git checkout 364703ca0962c4a12688daf8758802a5df9e3221
          sudo apt update
          sudo ./tools/get_dependencies.sh
          curl -L -o ./tarballs/MacOSX10.15.sdk.tar.xz https://github.com/xorrior/osxsdk/raw/master/MacOSX10.15.sdk.tar.xz
          PORTABLE=true UNATTENDED=true ./build.sh
          PORTABLE=true UNATTENDED=true ./build_binutils.sh
      - name: Add OSXCross to path
        run: |
          export PATH=$PATH:./osxcross/target/bin

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew publishToMavenLocal -DandroidNdk=$ANDROID_NDK_HOME
        env:
          PGP_KEY: ${{ secrets.PGP_KEY }}
          PGP_KEY_ID: ${{ secrets.PGP_KEY_ID }}
          PGP_PASSWORD: ${{ secrets.PGP_PASSWORD }}
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: devolay-java/build/libs/*.*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish
        run: ./gradlew publish -DandroidNdk=$ANDROID_NDK_HOME
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          PGP_KEY: ${{ secrets.PGP_KEY }}
          PGP_KEY_ID: ${{ secrets.PGP_KEY_ID }}
          PGP_PASSWORD: ${{ secrets.PGP_PASSWORD }}
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: build-artifacts
          path: devolay-java/build/libs
